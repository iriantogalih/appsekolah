// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
   id         String      @id
   username   String      @unique
}

model Student {
  id          String      @id
  username    String      @unique
  name        String
  surname     String
  email       String?     @unique
  phone       String?     @unique
  address     String
  img         String?
  bloodType   String
  birthday    DateTime
  sex         UserSex
  createdAt   DateTime    @default(now())

  parentId    String      
  parent      Parent      @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class       @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade       @relation(fields: [gradeId], references: [id])
  attendance  Attendance[]
  result      Result[]
  report      Report[]
}

model Teacher {
  id          String      @id
  username    String      @unique
  name        String
  surname     String
  email       String      @unique
  phone       String      @unique
  address     String
  img         String?
  bloodType   String
  birthday    DateTime
  sex         UserSex
  createdAt   DateTime    @default(now())

  subjects    Subject[]
  lesson      Lesson[]
  class       Class[]
  report      Report[]
}

model Parent {
  id          String      @id
  username    String      @unique
  name        String
  surname     String
  email       String      @unique
  phone       String      @unique
  address     String
  bloodType   String
  birthday    DateTime
  createdAt   DateTime    @default(now())

  students    Student[]
}

model Grade {
  id            Int      @id @default(autoincrement())
  level         Int      @unique

  students      Student[]
  classes       Class[]
}

model Class {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  capacity      Int

  supervisorId  String?    
  supervisor    Teacher?   @relation(fields: [supervisorId], references: [id])
  gradeId       Int
  grade         Grade      @relation(fields: [gradeId], references: [id])
  lessons       Lesson[]
  students      Student[]
  event         Event[]
  announcement  Announcement[]

}

model Subject {
  id          Int         @id @default(autoincrement())
  name        String      @unique

  teachers    Teacher[]
  lessons     Lesson[]
}

model Lesson {
  id        Int         @id @default(autoincrement())
  name      String 
  day       Day
  starttime DateTime
  endtime   DateTime

  subjectId Int
  subject     Subject       @relation(fields:[subjectId], references: [id])
  classId     Int
  class       Class         @relation(fields: [classId], references: [id])
  teacherId   String        
  teacher     Teacher       @relation(fields: [teacherId], references: [id])
  exam        Exam[]
  assignment  Assignment[]
  attendance  Attendance[]
  report      Report[]
}

model Exam {
  id        Int         @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId  Int
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
  result    Result[]
}

model Assignment {
  id        Int         @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId  Int
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
  result    Result[]
 

}

model Result {
  id            Int              @id @default(autoincrement())
  score         Int

  examid        Int?
  exam          Exam?            @relation(fields: [examid], references: [id])
  assignmentId  Int?
  assignment    Assignment ?     @relation(fields: [assignmentId], references: [id])
  studentId     String?          
  studnet       Student?         @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int       @id @default(autoincrement())
  date    DateTime
  present  Boolean

  studentId String  
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  poster        String?
  startDate     DateTime
  endDate       DateTime

  classId       Int?
  class         Class?     @relation(fields: [classId], references: [id])
  eventpicture  EventPicture[]
}

model EventPicture {
  id       Int      @id @default(autoincrement())
  photo    String

  eventId  Int
  event    Event    @relation(fields: [eventId], references: [id])
}
model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  poster      String?
  date        DateTime

  classId     Int?
  class       Class?     @relation(fields: [classId], references: [id])
}

model Report{
  id          Int       @id @default(autoincrement())
  feedback    String
  date        DateTime

  studentId   String    
  student     Student   @relation(fields: [studentId], references: [id])
  teacherId   String    
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  lessonId    Int
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
}

enum UserSex{
  Male
  Female
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}